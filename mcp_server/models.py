# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T14:07:41+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field, RootModel, conint, constr


class BadRequestException(RootModel[Any]):
    root: Any


class BaseModelName(Enum):
    NarrowBand = 'NarrowBand'
    WideBand = 'WideBand'


class Boolean(RootModel[bool]):
    root: bool


class CLMLanguageCode(Enum):
    en_US = 'en-US'
    hi_IN = 'hi-IN'
    es_US = 'es-US'
    en_GB = 'en-GB'
    en_AU = 'en-AU'
    de_DE = 'de-DE'
    ja_JP = 'ja-JP'


class CallAnalyticsJobName(
    RootModel[constr(pattern=r'^[0-9a-zA-Z._-]+', min_length=1, max_length=200)]
):
    root: constr(pattern=r'^[0-9a-zA-Z._-]+', min_length=1, max_length=200)


class CallAnalyticsJobStatus(Enum):
    QUEUED = 'QUEUED'
    IN_PROGRESS = 'IN_PROGRESS'
    FAILED = 'FAILED'
    COMPLETED = 'COMPLETED'


class CategoryName(
    RootModel[constr(pattern=r'^[0-9a-zA-Z._-]+', min_length=1, max_length=200)]
):
    root: constr(pattern=r'^[0-9a-zA-Z._-]+', min_length=1, max_length=200)


class ChannelId(RootModel[conint(ge=0, le=1)]):
    root: conint(ge=0, le=1)


class ConflictException(RootModel[Any]):
    root: Any


class DataAccessRoleArn(
    RootModel[
        constr(
            pattern=r'^arn:(aws|aws-cn|aws-us-gov|aws-iso-{0,1}[a-z]{0,1}):iam::[0-9]{0,63}:role/[A-Za-z0-9:_/+=,@.-]{0,1024}$',
            min_length=20,
            max_length=2048,
        )
    ]
):
    root: constr(
        pattern=r'^arn:(aws|aws-cn|aws-us-gov|aws-iso-{0,1}[a-z]{0,1}):iam::[0-9]{0,63}:role/[A-Za-z0-9:_/+=,@.-]{0,1024}$',
        min_length=20,
        max_length=2048,
    )


class DateTime(RootModel[datetime]):
    root: datetime


class DeleteCallAnalyticsCategoryRequest(BaseModel):
    CategoryName_1: CategoryName = Field(..., alias='CategoryName')


class DeleteCallAnalyticsCategoryResponse(BaseModel):
    pass


class DeleteCallAnalyticsJobRequest(BaseModel):
    CallAnalyticsJobName_1: CallAnalyticsJobName = Field(
        ..., alias='CallAnalyticsJobName'
    )


class DeleteCallAnalyticsJobResponse(BaseModel):
    pass


class DurationInSeconds(RootModel[float]):
    root: float


class FailureReason(RootModel[str]):
    root: str


class GetCallAnalyticsCategoryRequest(BaseModel):
    CategoryName_1: CategoryName = Field(..., alias='CategoryName')


class GetCallAnalyticsJobRequest(BaseModel):
    CallAnalyticsJobName_1: CallAnalyticsJobName = Field(
        ..., alias='CallAnalyticsJobName'
    )


class IdentifiedLanguageScore(RootModel[float]):
    root: float


class InputType(Enum):
    REAL_TIME = 'REAL_TIME'
    POST_CALL = 'POST_CALL'


class InternalFailureException(RootModel[Any]):
    root: Any


class JobExecutionSettings(BaseModel):
    AllowDeferredExecution: Optional[Boolean] = None
    DataAccessRoleArn_1: Optional[DataAccessRoleArn] = Field(
        None, alias='DataAccessRoleArn'
    )


class KMSKeyId(
    RootModel[
        constr(
            pattern=r'^[A-Za-z0-9][A-Za-z0-9:_/+=,@.-]{0,2048}$',
            min_length=1,
            max_length=2048,
        )
    ]
):
    root: constr(
        pattern=r'^[A-Za-z0-9][A-Za-z0-9:_/+=,@.-]{0,2048}$',
        min_length=1,
        max_length=2048,
    )


class LanguageCode(Enum):
    af_ZA = 'af-ZA'
    ar_AE = 'ar-AE'
    ar_SA = 'ar-SA'
    da_DK = 'da-DK'
    de_CH = 'de-CH'
    de_DE = 'de-DE'
    en_AB = 'en-AB'
    en_AU = 'en-AU'
    en_GB = 'en-GB'
    en_IE = 'en-IE'
    en_IN = 'en-IN'
    en_US = 'en-US'
    en_WL = 'en-WL'
    es_ES = 'es-ES'
    es_US = 'es-US'
    fa_IR = 'fa-IR'
    fr_CA = 'fr-CA'
    fr_FR = 'fr-FR'
    he_IL = 'he-IL'
    hi_IN = 'hi-IN'
    id_ID = 'id-ID'
    it_IT = 'it-IT'
    ja_JP = 'ja-JP'
    ko_KR = 'ko-KR'
    ms_MY = 'ms-MY'
    nl_NL = 'nl-NL'
    pt_BR = 'pt-BR'
    pt_PT = 'pt-PT'
    ru_RU = 'ru-RU'
    ta_IN = 'ta-IN'
    te_IN = 'te-IN'
    tr_TR = 'tr-TR'
    zh_CN = 'zh-CN'
    zh_TW = 'zh-TW'
    th_TH = 'th-TH'
    en_ZA = 'en-ZA'
    en_NZ = 'en-NZ'
    vi_VN = 'vi-VN'
    sv_SE = 'sv-SE'


class LanguageCodeItem(BaseModel):
    DurationInSeconds_1: Optional[DurationInSeconds] = Field(
        None, alias='DurationInSeconds'
    )
    LanguageCode_1: Optional[LanguageCode] = Field(None, alias='LanguageCode')


class LanguageCodeList(RootModel[List[LanguageCodeItem]]):
    root: List[LanguageCodeItem]


class LanguageOptions(RootModel[List[LanguageCode]]):
    root: List[LanguageCode] = Field(..., min_length=1)


class LimitExceededException(RootModel[Any]):
    root: Any


class MaxAlternatives(RootModel[conint(ge=2, le=10)]):
    root: conint(ge=2, le=10)


class MaxResults(RootModel[conint(ge=1, le=100)]):
    root: conint(ge=1, le=100)


class MaxSpeakers(RootModel[conint(ge=2, le=10)]):
    root: conint(ge=2, le=10)


class MediaFormat(Enum):
    mp3 = 'mp3'
    mp4 = 'mp4'
    wav = 'wav'
    flac = 'flac'
    ogg = 'ogg'
    amr = 'amr'
    webm = 'webm'


class MediaSampleRateHertz(RootModel[conint(ge=8000, le=48000)]):
    root: conint(ge=8000, le=48000)


class MedicalContentIdentificationType(Enum):
    PHI = 'PHI'


class MedicalMediaSampleRateHertz(RootModel[conint(ge=16000, le=48000)]):
    root: conint(ge=16000, le=48000)


class ModelName(
    RootModel[constr(pattern=r'^[0-9a-zA-Z._-]+', min_length=1, max_length=200)]
):
    root: constr(pattern=r'^[0-9a-zA-Z._-]+', min_length=1, max_length=200)


class ModelSettings(BaseModel):
    LanguageModelName: Optional[ModelName] = None


class ModelStatus(Enum):
    IN_PROGRESS = 'IN_PROGRESS'
    FAILED = 'FAILED'
    COMPLETED = 'COMPLETED'


class NextToken(RootModel[constr(pattern=r'.+', max_length=8192)]):
    root: constr(pattern=r'.+', max_length=8192)


class NonEmptyString(
    RootModel[constr(pattern=r'.*\S.*', min_length=1, max_length=2000)]
):
    root: constr(pattern=r'.*\S.*', min_length=1, max_length=2000)


class NotFoundException(RootModel[Any]):
    root: Any


class OutputBucketName(
    RootModel[constr(pattern=r'[a-z0-9][\.\-a-z0-9]{1,61}[a-z0-9]', max_length=64)]
):
    root: constr(pattern=r'[a-z0-9][\.\-a-z0-9]{1,61}[a-z0-9]', max_length=64)


class OutputKey(
    RootModel[
        constr(pattern=r'[a-zA-Z0-9-_.!*\'()/]{1,1024}$', min_length=1, max_length=1024)
    ]
):
    root: constr(
        pattern=r'[a-zA-Z0-9-_.!*\'()/]{1,1024}$', min_length=1, max_length=1024
    )


class OutputLocationType(Enum):
    CUSTOMER_BUCKET = 'CUSTOMER_BUCKET'
    SERVICE_BUCKET = 'SERVICE_BUCKET'


class ParticipantRole(Enum):
    AGENT = 'AGENT'
    CUSTOMER = 'CUSTOMER'


class Percentage(RootModel[conint(ge=0, le=100)]):
    root: conint(ge=0, le=100)


class Phrase(RootModel[constr(pattern=r'.+', min_length=0, max_length=256)]):
    root: constr(pattern=r'.+', min_length=0, max_length=256)


class Phrases(RootModel[List[Phrase]]):
    root: List[Phrase]


class PiiEntityType(Enum):
    BANK_ACCOUNT_NUMBER = 'BANK_ACCOUNT_NUMBER'
    BANK_ROUTING = 'BANK_ROUTING'
    CREDIT_DEBIT_NUMBER = 'CREDIT_DEBIT_NUMBER'
    CREDIT_DEBIT_CVV = 'CREDIT_DEBIT_CVV'
    CREDIT_DEBIT_EXPIRY = 'CREDIT_DEBIT_EXPIRY'
    PIN = 'PIN'
    EMAIL = 'EMAIL'
    ADDRESS = 'ADDRESS'
    NAME = 'NAME'
    PHONE = 'PHONE'
    SSN = 'SSN'
    ALL = 'ALL'


class PiiEntityTypes(RootModel[List[PiiEntityType]]):
    root: List[PiiEntityType] = Field(..., max_length=11, min_length=0)


class RedactionOutput(Enum):
    redacted = 'redacted'
    redacted_and_unredacted = 'redacted_and_unredacted'


class RedactionType(Enum):
    PII = 'PII'


class RelativeTimeRange(BaseModel):
    EndPercentage: Optional[Percentage] = None
    First: Optional[Percentage] = None
    Last: Optional[Percentage] = None
    StartPercentage: Optional[Percentage] = None


class SentimentValue(Enum):
    POSITIVE = 'POSITIVE'
    NEGATIVE = 'NEGATIVE'
    NEUTRAL = 'NEUTRAL'
    MIXED = 'MIXED'


class SentimentValueList(RootModel[List[SentimentValue]]):
    root: List[SentimentValue] = Field(..., max_length=1, min_length=1)


class Specialty(Enum):
    PRIMARYCARE = 'PRIMARYCARE'


class StringTargetList(RootModel[List[NonEmptyString]]):
    root: List[NonEmptyString] = Field(..., min_length=1)


class SubtitleFormat(Enum):
    vtt = 'vtt'
    srt = 'srt'


class SubtitleFormats(RootModel[List[SubtitleFormat]]):
    root: List[SubtitleFormat]


class SubtitleOutputStartIndex(RootModel[conint(ge=0, le=1)]):
    root: conint(ge=0, le=1)


class Subtitles(BaseModel):
    Formats: Optional[SubtitleFormats] = None
    OutputStartIndex: Optional[SubtitleOutputStartIndex] = None


class TagKey(RootModel[constr(min_length=1, max_length=128)]):
    root: constr(min_length=1, max_length=128)


class TagKeyList(RootModel[List[TagKey]]):
    root: List[TagKey] = Field(..., max_length=200, min_length=1)


class TagResourceResponse(BaseModel):
    pass


class TagValue(RootModel[constr(min_length=0, max_length=256)]):
    root: constr(min_length=0, max_length=256)


class TimestampMilliseconds(RootModel[conint(ge=0, le=14400000)]):
    root: conint(ge=0, le=14400000)


class TranscribeArn(
    RootModel[
        constr(
            pattern=r'arn:aws(-[^:]+)?:transcribe:[a-zA-Z0-9-]*:[0-9]{12}:[a-zA-Z-]*/[0-9a-zA-Z._-]+',
            min_length=1,
            max_length=1011,
        )
    ]
):
    root: constr(
        pattern=r'arn:aws(-[^:]+)?:transcribe:[a-zA-Z0-9-]*:[0-9]{12}:[a-zA-Z-]*/[0-9a-zA-Z._-]+',
        min_length=1,
        max_length=1011,
    )


class TranscriptFilterType(Enum):
    EXACT = 'EXACT'


class TranscriptionJobName(
    RootModel[constr(pattern=r'^[0-9a-zA-Z._-]+', min_length=1, max_length=200)]
):
    root: constr(pattern=r'^[0-9a-zA-Z._-]+', min_length=1, max_length=200)


class TranscriptionJobStatus(Enum):
    QUEUED = 'QUEUED'
    IN_PROGRESS = 'IN_PROGRESS'
    FAILED = 'FAILED'
    COMPLETED = 'COMPLETED'


class Type(Enum):
    CONVERSATION = 'CONVERSATION'
    DICTATION = 'DICTATION'


class UntagResourceRequest(BaseModel):
    ResourceArn: TranscribeArn
    TagKeys: TagKeyList


class UntagResourceResponse(BaseModel):
    pass


class Uri(
    RootModel[constr(pattern=r'(s3://|http(s*)://).+', min_length=1, max_length=2000)]
):
    root: constr(pattern=r'(s3://|http(s*)://).+', min_length=1, max_length=2000)


class VocabularyFilterMethod(Enum):
    remove = 'remove'
    mask = 'mask'
    tag = 'tag'


class VocabularyFilterName(
    RootModel[constr(pattern=r'^[0-9a-zA-Z._-]+', min_length=1, max_length=200)]
):
    root: constr(pattern=r'^[0-9a-zA-Z._-]+', min_length=1, max_length=200)


class VocabularyName(
    RootModel[constr(pattern=r'^[0-9a-zA-Z._-]+', min_length=1, max_length=200)]
):
    root: constr(pattern=r'^[0-9a-zA-Z._-]+', min_length=1, max_length=200)


class VocabularyState(Enum):
    PENDING = 'PENDING'
    READY = 'READY'
    FAILED = 'FAILED'


class Word(RootModel[constr(min_length=1, max_length=256)]):
    root: constr(min_length=1, max_length=256)


class Words(RootModel[List[Word]]):
    root: List[Word] = Field(..., min_length=1)


class XAmzTarget(Enum):
    Transcribe_CreateCallAnalyticsCategory = 'Transcribe.CreateCallAnalyticsCategory'


class XAmzTarget1(Enum):
    Transcribe_CreateLanguageModel = 'Transcribe.CreateLanguageModel'


class XAmzTarget2(Enum):
    Transcribe_CreateMedicalVocabulary = 'Transcribe.CreateMedicalVocabulary'


class XAmzTarget3(Enum):
    Transcribe_CreateVocabulary = 'Transcribe.CreateVocabulary'


class XAmzTarget4(Enum):
    Transcribe_CreateVocabularyFilter = 'Transcribe.CreateVocabularyFilter'


class XAmzTarget5(Enum):
    Transcribe_DeleteCallAnalyticsCategory = 'Transcribe.DeleteCallAnalyticsCategory'


class XAmzTarget6(Enum):
    Transcribe_DeleteCallAnalyticsJob = 'Transcribe.DeleteCallAnalyticsJob'


class XAmzTarget7(Enum):
    Transcribe_DeleteLanguageModel = 'Transcribe.DeleteLanguageModel'


class XAmzTarget8(Enum):
    Transcribe_DeleteMedicalTranscriptionJob = (
        'Transcribe.DeleteMedicalTranscriptionJob'
    )


class XAmzTarget9(Enum):
    Transcribe_DeleteMedicalVocabulary = 'Transcribe.DeleteMedicalVocabulary'


class XAmzTarget10(Enum):
    Transcribe_DeleteTranscriptionJob = 'Transcribe.DeleteTranscriptionJob'


class XAmzTarget11(Enum):
    Transcribe_DeleteVocabulary = 'Transcribe.DeleteVocabulary'


class XAmzTarget12(Enum):
    Transcribe_DeleteVocabularyFilter = 'Transcribe.DeleteVocabularyFilter'


class XAmzTarget13(Enum):
    Transcribe_DescribeLanguageModel = 'Transcribe.DescribeLanguageModel'


class XAmzTarget14(Enum):
    Transcribe_GetCallAnalyticsCategory = 'Transcribe.GetCallAnalyticsCategory'


class XAmzTarget15(Enum):
    Transcribe_GetCallAnalyticsJob = 'Transcribe.GetCallAnalyticsJob'


class XAmzTarget16(Enum):
    Transcribe_GetMedicalTranscriptionJob = 'Transcribe.GetMedicalTranscriptionJob'


class XAmzTarget17(Enum):
    Transcribe_GetMedicalVocabulary = 'Transcribe.GetMedicalVocabulary'


class XAmzTarget18(Enum):
    Transcribe_GetTranscriptionJob = 'Transcribe.GetTranscriptionJob'


class XAmzTarget19(Enum):
    Transcribe_GetVocabulary = 'Transcribe.GetVocabulary'


class XAmzTarget20(Enum):
    Transcribe_GetVocabularyFilter = 'Transcribe.GetVocabularyFilter'


class XAmzTarget21(Enum):
    Transcribe_ListCallAnalyticsCategories = 'Transcribe.ListCallAnalyticsCategories'


class XAmzTarget22(Enum):
    Transcribe_ListCallAnalyticsJobs = 'Transcribe.ListCallAnalyticsJobs'


class XAmzTarget23(Enum):
    Transcribe_ListLanguageModels = 'Transcribe.ListLanguageModels'


class XAmzTarget24(Enum):
    Transcribe_ListMedicalTranscriptionJobs = 'Transcribe.ListMedicalTranscriptionJobs'


class XAmzTarget25(Enum):
    Transcribe_ListMedicalVocabularies = 'Transcribe.ListMedicalVocabularies'


class XAmzTarget26(Enum):
    Transcribe_ListTagsForResource = 'Transcribe.ListTagsForResource'


class XAmzTarget27(Enum):
    Transcribe_ListTranscriptionJobs = 'Transcribe.ListTranscriptionJobs'


class XAmzTarget28(Enum):
    Transcribe_ListVocabularies = 'Transcribe.ListVocabularies'


class XAmzTarget29(Enum):
    Transcribe_ListVocabularyFilters = 'Transcribe.ListVocabularyFilters'


class XAmzTarget30(Enum):
    Transcribe_StartCallAnalyticsJob = 'Transcribe.StartCallAnalyticsJob'


class XAmzTarget31(Enum):
    Transcribe_StartMedicalTranscriptionJob = 'Transcribe.StartMedicalTranscriptionJob'


class XAmzTarget32(Enum):
    Transcribe_StartTranscriptionJob = 'Transcribe.StartTranscriptionJob'


class XAmzTarget33(Enum):
    Transcribe_TagResource = 'Transcribe.TagResource'


class XAmzTarget34(Enum):
    Transcribe_UntagResource = 'Transcribe.UntagResource'


class XAmzTarget35(Enum):
    Transcribe_UpdateCallAnalyticsCategory = 'Transcribe.UpdateCallAnalyticsCategory'


class XAmzTarget36(Enum):
    Transcribe_UpdateMedicalVocabulary = 'Transcribe.UpdateMedicalVocabulary'


class XAmzTarget37(Enum):
    Transcribe_UpdateVocabulary = 'Transcribe.UpdateVocabulary'


class XAmzTarget38(Enum):
    Transcribe_UpdateVocabularyFilter = 'Transcribe.UpdateVocabularyFilter'


class AbsoluteTimeRange(BaseModel):
    EndTime: Optional[TimestampMilliseconds] = None
    First: Optional[TimestampMilliseconds] = None
    Last: Optional[TimestampMilliseconds] = None
    StartTime: Optional[TimestampMilliseconds] = None


class CallAnalyticsJobSummary(BaseModel):
    CallAnalyticsJobName_1: Optional[CallAnalyticsJobName] = Field(
        None, alias='CallAnalyticsJobName'
    )
    CallAnalyticsJobStatus_1: Optional[CallAnalyticsJobStatus] = Field(
        None, alias='CallAnalyticsJobStatus'
    )
    CompletionTime: Optional[DateTime] = None
    CreationTime: Optional[DateTime] = None
    FailureReason_1: Optional[FailureReason] = Field(None, alias='FailureReason')
    LanguageCode_1: Optional[LanguageCode] = Field(None, alias='LanguageCode')
    StartTime: Optional[DateTime] = None


class ChannelDefinition(BaseModel):
    ChannelId_1: Optional[ChannelId] = Field(None, alias='ChannelId')
    ParticipantRole_1: Optional[ParticipantRole] = Field(None, alias='ParticipantRole')


class ChannelDefinitions(RootModel[List[ChannelDefinition]]):
    root: List[ChannelDefinition] = Field(..., max_length=2, min_length=2)


class ContentRedaction(BaseModel):
    PiiEntityTypes_1: Optional[PiiEntityTypes] = Field(None, alias='PiiEntityTypes')
    RedactionOutput_1: RedactionOutput = Field(..., alias='RedactionOutput')
    RedactionType_1: RedactionType = Field(..., alias='RedactionType')


class CreateMedicalVocabularyResponse(BaseModel):
    FailureReason_1: Optional[FailureReason] = Field(None, alias='FailureReason')
    LanguageCode_1: Optional[LanguageCode] = Field(None, alias='LanguageCode')
    LastModifiedTime: Optional[DateTime] = None
    VocabularyName_1: Optional[VocabularyName] = Field(None, alias='VocabularyName')
    VocabularyState_1: Optional[VocabularyState] = Field(None, alias='VocabularyState')


class CreateVocabularyFilterResponse(BaseModel):
    LanguageCode_1: Optional[LanguageCode] = Field(None, alias='LanguageCode')
    LastModifiedTime: Optional[DateTime] = None
    VocabularyFilterName_1: Optional[VocabularyFilterName] = Field(
        None, alias='VocabularyFilterName'
    )


class CreateVocabularyResponse(BaseModel):
    FailureReason_1: Optional[FailureReason] = Field(None, alias='FailureReason')
    LanguageCode_1: Optional[LanguageCode] = Field(None, alias='LanguageCode')
    LastModifiedTime: Optional[DateTime] = None
    VocabularyName_1: Optional[VocabularyName] = Field(None, alias='VocabularyName')
    VocabularyState_1: Optional[VocabularyState] = Field(None, alias='VocabularyState')


class DeleteLanguageModelRequest(BaseModel):
    ModelName_1: ModelName = Field(..., alias='ModelName')


class DeleteMedicalTranscriptionJobRequest(BaseModel):
    MedicalTranscriptionJobName: TranscriptionJobName


class DeleteMedicalVocabularyRequest(BaseModel):
    VocabularyName_1: VocabularyName = Field(..., alias='VocabularyName')


class DeleteTranscriptionJobRequest(BaseModel):
    TranscriptionJobName_1: TranscriptionJobName = Field(
        ..., alias='TranscriptionJobName'
    )


class DeleteVocabularyFilterRequest(BaseModel):
    VocabularyFilterName_1: VocabularyFilterName = Field(
        ..., alias='VocabularyFilterName'
    )


class DeleteVocabularyRequest(BaseModel):
    VocabularyName_1: VocabularyName = Field(..., alias='VocabularyName')


class DescribeLanguageModelRequest(BaseModel):
    ModelName_1: ModelName = Field(..., alias='ModelName')


class GetMedicalTranscriptionJobRequest(BaseModel):
    MedicalTranscriptionJobName: TranscriptionJobName


class GetMedicalVocabularyRequest(BaseModel):
    VocabularyName_1: VocabularyName = Field(..., alias='VocabularyName')


class GetMedicalVocabularyResponse(BaseModel):
    DownloadUri: Optional[Uri] = None
    FailureReason_1: Optional[FailureReason] = Field(None, alias='FailureReason')
    LanguageCode_1: Optional[LanguageCode] = Field(None, alias='LanguageCode')
    LastModifiedTime: Optional[DateTime] = None
    VocabularyName_1: Optional[VocabularyName] = Field(None, alias='VocabularyName')
    VocabularyState_1: Optional[VocabularyState] = Field(None, alias='VocabularyState')


class GetTranscriptionJobRequest(BaseModel):
    TranscriptionJobName_1: TranscriptionJobName = Field(
        ..., alias='TranscriptionJobName'
    )


class GetVocabularyFilterRequest(BaseModel):
    VocabularyFilterName_1: VocabularyFilterName = Field(
        ..., alias='VocabularyFilterName'
    )


class GetVocabularyFilterResponse(BaseModel):
    DownloadUri: Optional[Uri] = None
    LanguageCode_1: Optional[LanguageCode] = Field(None, alias='LanguageCode')
    LastModifiedTime: Optional[DateTime] = None
    VocabularyFilterName_1: Optional[VocabularyFilterName] = Field(
        None, alias='VocabularyFilterName'
    )


class GetVocabularyRequest(BaseModel):
    VocabularyName_1: VocabularyName = Field(..., alias='VocabularyName')


class GetVocabularyResponse(BaseModel):
    DownloadUri: Optional[Uri] = None
    FailureReason_1: Optional[FailureReason] = Field(None, alias='FailureReason')
    LanguageCode_1: Optional[LanguageCode] = Field(None, alias='LanguageCode')
    LastModifiedTime: Optional[DateTime] = None
    VocabularyName_1: Optional[VocabularyName] = Field(None, alias='VocabularyName')
    VocabularyState_1: Optional[VocabularyState] = Field(None, alias='VocabularyState')


class InputDataConfig(BaseModel):
    DataAccessRoleArn_1: DataAccessRoleArn = Field(..., alias='DataAccessRoleArn')
    S3Uri: Uri
    TuningDataS3Uri: Optional[Uri] = None


class InterruptionFilter(BaseModel):
    AbsoluteTimeRange_1: Optional[AbsoluteTimeRange] = Field(
        None, alias='AbsoluteTimeRange'
    )
    Negate: Optional[Boolean] = None
    ParticipantRole_1: Optional[ParticipantRole] = Field(None, alias='ParticipantRole')
    RelativeTimeRange_1: Optional[RelativeTimeRange] = Field(
        None, alias='RelativeTimeRange'
    )
    Threshold: Optional[TimestampMilliseconds] = None


class KMSEncryptionContextMap(RootModel[Optional[Dict[str, NonEmptyString]]]):
    root: Optional[Dict[str, NonEmptyString]] = None


class LanguageIdSettings(BaseModel):
    LanguageModelName: Optional[ModelName] = None
    VocabularyFilterName_1: Optional[VocabularyFilterName] = Field(
        None, alias='VocabularyFilterName'
    )
    VocabularyName_1: Optional[VocabularyName] = Field(None, alias='VocabularyName')


class LanguageIdSettingsMap(RootModel[Optional[Dict[str, LanguageIdSettings]]]):
    root: Optional[Dict[str, LanguageIdSettings]] = None


class LanguageModel(BaseModel):
    BaseModelName_1: Optional[BaseModelName] = Field(None, alias='BaseModelName')
    CreateTime: Optional[DateTime] = None
    FailureReason_1: Optional[FailureReason] = Field(None, alias='FailureReason')
    InputDataConfig_1: Optional[InputDataConfig] = Field(None, alias='InputDataConfig')
    LanguageCode: Optional[CLMLanguageCode] = None
    LastModifiedTime: Optional[DateTime] = None
    ModelName_1: Optional[ModelName] = Field(None, alias='ModelName')
    ModelStatus_1: Optional[ModelStatus] = Field(None, alias='ModelStatus')
    UpgradeAvailability: Optional[Boolean] = None


class ListCallAnalyticsCategoriesRequest(BaseModel):
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListCallAnalyticsJobsRequest(BaseModel):
    JobNameContains: Optional[CallAnalyticsJobName] = None
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    Status: Optional[CallAnalyticsJobStatus] = None


class ListLanguageModelsRequest(BaseModel):
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NameContains: Optional[ModelName] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    StatusEquals: Optional[ModelStatus] = None


class ListMedicalTranscriptionJobsRequest(BaseModel):
    JobNameContains: Optional[TranscriptionJobName] = None
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    Status: Optional[TranscriptionJobStatus] = None


class ListMedicalVocabulariesRequest(BaseModel):
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NameContains: Optional[VocabularyName] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    StateEquals: Optional[VocabularyState] = None


class ListTagsForResourceRequest(BaseModel):
    ResourceArn: TranscribeArn


class ListTranscriptionJobsRequest(BaseModel):
    JobNameContains: Optional[TranscriptionJobName] = None
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    Status: Optional[TranscriptionJobStatus] = None


class ListVocabulariesRequest(BaseModel):
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NameContains: Optional[VocabularyName] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    StateEquals: Optional[VocabularyState] = None


class ListVocabularyFiltersRequest(BaseModel):
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NameContains: Optional[VocabularyFilterName] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class Media(BaseModel):
    MediaFileUri: Optional[Uri] = None
    RedactedMediaFileUri: Optional[Uri] = None


class MedicalTranscript(BaseModel):
    TranscriptFileUri: Optional[Uri] = None


class MedicalTranscriptionJobSummary(BaseModel):
    CompletionTime: Optional[DateTime] = None
    ContentIdentificationType: Optional[MedicalContentIdentificationType] = None
    CreationTime: Optional[DateTime] = None
    FailureReason_1: Optional[FailureReason] = Field(None, alias='FailureReason')
    LanguageCode_1: Optional[LanguageCode] = Field(None, alias='LanguageCode')
    MedicalTranscriptionJobName: Optional[TranscriptionJobName] = None
    OutputLocationType_1: Optional[OutputLocationType] = Field(
        None, alias='OutputLocationType'
    )
    Specialty_1: Optional[Specialty] = Field(None, alias='Specialty')
    StartTime: Optional[DateTime] = None
    TranscriptionJobStatus_1: Optional[TranscriptionJobStatus] = Field(
        None, alias='TranscriptionJobStatus'
    )
    Type_1: Optional[Type] = Field(None, alias='Type')


class MedicalTranscriptionSetting(BaseModel):
    ChannelIdentification: Optional[Boolean] = None
    MaxAlternatives_1: Optional[MaxAlternatives] = Field(None, alias='MaxAlternatives')
    MaxSpeakerLabels: Optional[MaxSpeakers] = None
    ShowAlternatives: Optional[Boolean] = None
    ShowSpeakerLabels: Optional[Boolean] = None
    VocabularyName_1: Optional[VocabularyName] = Field(None, alias='VocabularyName')


class Models(RootModel[List[LanguageModel]]):
    root: List[LanguageModel]


class NonTalkTimeFilter(BaseModel):
    AbsoluteTimeRange_1: Optional[AbsoluteTimeRange] = Field(
        None, alias='AbsoluteTimeRange'
    )
    Negate: Optional[Boolean] = None
    RelativeTimeRange_1: Optional[RelativeTimeRange] = Field(
        None, alias='RelativeTimeRange'
    )
    Threshold: Optional[TimestampMilliseconds] = None


class SentimentFilter(BaseModel):
    AbsoluteTimeRange_1: Optional[AbsoluteTimeRange] = Field(
        None, alias='AbsoluteTimeRange'
    )
    Negate: Optional[Boolean] = None
    ParticipantRole_1: Optional[ParticipantRole] = Field(None, alias='ParticipantRole')
    RelativeTimeRange_1: Optional[RelativeTimeRange] = Field(
        None, alias='RelativeTimeRange'
    )
    Sentiments: SentimentValueList


class Settings(BaseModel):
    ChannelIdentification: Optional[Boolean] = None
    MaxAlternatives_1: Optional[MaxAlternatives] = Field(None, alias='MaxAlternatives')
    MaxSpeakerLabels: Optional[MaxSpeakers] = None
    ShowAlternatives: Optional[Boolean] = None
    ShowSpeakerLabels: Optional[Boolean] = None
    VocabularyFilterMethod_1: Optional[VocabularyFilterMethod] = Field(
        None, alias='VocabularyFilterMethod'
    )
    VocabularyFilterName_1: Optional[VocabularyFilterName] = Field(
        None, alias='VocabularyFilterName'
    )
    VocabularyName_1: Optional[VocabularyName] = Field(None, alias='VocabularyName')


class SubtitleFileUris(RootModel[List[Uri]]):
    root: List[Uri]


class SubtitlesOutput(BaseModel):
    Formats: Optional[SubtitleFormats] = None
    OutputStartIndex: Optional[SubtitleOutputStartIndex] = None
    SubtitleFileUris_1: Optional[SubtitleFileUris] = Field(
        None, alias='SubtitleFileUris'
    )


class Tag(BaseModel):
    Key: TagKey
    Value: TagValue


class TagList(RootModel[List[Tag]]):
    root: List[Tag] = Field(..., max_length=200, min_length=1)


class TagResourceRequest(BaseModel):
    ResourceArn: TranscribeArn
    Tags: TagList


class Transcript(BaseModel):
    RedactedTranscriptFileUri: Optional[Uri] = None
    TranscriptFileUri: Optional[Uri] = None


class TranscriptFilter(BaseModel):
    AbsoluteTimeRange_1: Optional[AbsoluteTimeRange] = Field(
        None, alias='AbsoluteTimeRange'
    )
    Negate: Optional[Boolean] = None
    ParticipantRole_1: Optional[ParticipantRole] = Field(None, alias='ParticipantRole')
    RelativeTimeRange_1: Optional[RelativeTimeRange] = Field(
        None, alias='RelativeTimeRange'
    )
    Targets: StringTargetList
    TranscriptFilterType_1: TranscriptFilterType = Field(
        ..., alias='TranscriptFilterType'
    )


class TranscriptionJob(BaseModel):
    CompletionTime: Optional[DateTime] = None
    ContentRedaction_1: Optional[ContentRedaction] = Field(
        None, alias='ContentRedaction'
    )
    CreationTime: Optional[DateTime] = None
    FailureReason_1: Optional[FailureReason] = Field(None, alias='FailureReason')
    IdentifiedLanguageScore_1: Optional[IdentifiedLanguageScore] = Field(
        None, alias='IdentifiedLanguageScore'
    )
    IdentifyLanguage: Optional[Boolean] = None
    IdentifyMultipleLanguages: Optional[Boolean] = None
    JobExecutionSettings_1: Optional[JobExecutionSettings] = Field(
        None, alias='JobExecutionSettings'
    )
    LanguageCode_1: Optional[LanguageCode] = Field(None, alias='LanguageCode')
    LanguageCodes: Optional[LanguageCodeList] = None
    LanguageIdSettings: Optional[LanguageIdSettingsMap] = None
    LanguageOptions_1: Optional[LanguageOptions] = Field(None, alias='LanguageOptions')
    Media_1: Optional[Media] = Field(None, alias='Media')
    MediaFormat_1: Optional[MediaFormat] = Field(None, alias='MediaFormat')
    MediaSampleRateHertz_1: Optional[MediaSampleRateHertz] = Field(
        None, alias='MediaSampleRateHertz'
    )
    ModelSettings_1: Optional[ModelSettings] = Field(None, alias='ModelSettings')
    Settings_1: Optional[Settings] = Field(None, alias='Settings')
    StartTime: Optional[DateTime] = None
    Subtitles: Optional[SubtitlesOutput] = None
    Tags: Optional[TagList] = None
    Transcript_1: Optional[Transcript] = Field(None, alias='Transcript')
    TranscriptionJobName_1: Optional[TranscriptionJobName] = Field(
        None, alias='TranscriptionJobName'
    )
    TranscriptionJobStatus_1: Optional[TranscriptionJobStatus] = Field(
        None, alias='TranscriptionJobStatus'
    )


class TranscriptionJobSummary(BaseModel):
    CompletionTime: Optional[DateTime] = None
    ContentRedaction_1: Optional[ContentRedaction] = Field(
        None, alias='ContentRedaction'
    )
    CreationTime: Optional[DateTime] = None
    FailureReason_1: Optional[FailureReason] = Field(None, alias='FailureReason')
    IdentifiedLanguageScore_1: Optional[IdentifiedLanguageScore] = Field(
        None, alias='IdentifiedLanguageScore'
    )
    IdentifyLanguage: Optional[Boolean] = None
    IdentifyMultipleLanguages: Optional[Boolean] = None
    LanguageCode_1: Optional[LanguageCode] = Field(None, alias='LanguageCode')
    LanguageCodes: Optional[LanguageCodeList] = None
    ModelSettings_1: Optional[ModelSettings] = Field(None, alias='ModelSettings')
    OutputLocationType_1: Optional[OutputLocationType] = Field(
        None, alias='OutputLocationType'
    )
    StartTime: Optional[DateTime] = None
    TranscriptionJobName_1: Optional[TranscriptionJobName] = Field(
        None, alias='TranscriptionJobName'
    )
    TranscriptionJobStatus_1: Optional[TranscriptionJobStatus] = Field(
        None, alias='TranscriptionJobStatus'
    )


class UpdateMedicalVocabularyRequest(BaseModel):
    LanguageCode_1: LanguageCode = Field(..., alias='LanguageCode')
    VocabularyFileUri: Uri
    VocabularyName_1: VocabularyName = Field(..., alias='VocabularyName')


class UpdateMedicalVocabularyResponse(BaseModel):
    LanguageCode_1: Optional[LanguageCode] = Field(None, alias='LanguageCode')
    LastModifiedTime: Optional[DateTime] = None
    VocabularyName_1: Optional[VocabularyName] = Field(None, alias='VocabularyName')
    VocabularyState_1: Optional[VocabularyState] = Field(None, alias='VocabularyState')


class UpdateVocabularyFilterRequest(BaseModel):
    DataAccessRoleArn_1: Optional[DataAccessRoleArn] = Field(
        None, alias='DataAccessRoleArn'
    )
    VocabularyFilterFileUri: Optional[Uri] = None
    VocabularyFilterName_1: VocabularyFilterName = Field(
        ..., alias='VocabularyFilterName'
    )
    Words_1: Optional[Words] = Field(None, alias='Words')


class UpdateVocabularyFilterResponse(BaseModel):
    LanguageCode_1: Optional[LanguageCode] = Field(None, alias='LanguageCode')
    LastModifiedTime: Optional[DateTime] = None
    VocabularyFilterName_1: Optional[VocabularyFilterName] = Field(
        None, alias='VocabularyFilterName'
    )


class UpdateVocabularyRequest(BaseModel):
    DataAccessRoleArn_1: Optional[DataAccessRoleArn] = Field(
        None, alias='DataAccessRoleArn'
    )
    LanguageCode_1: LanguageCode = Field(..., alias='LanguageCode')
    Phrases_1: Optional[Phrases] = Field(None, alias='Phrases')
    VocabularyFileUri: Optional[Uri] = None
    VocabularyName_1: VocabularyName = Field(..., alias='VocabularyName')


class UpdateVocabularyResponse(BaseModel):
    LanguageCode_1: Optional[LanguageCode] = Field(None, alias='LanguageCode')
    LastModifiedTime: Optional[DateTime] = None
    VocabularyName_1: Optional[VocabularyName] = Field(None, alias='VocabularyName')
    VocabularyState_1: Optional[VocabularyState] = Field(None, alias='VocabularyState')


class VocabularyFilterInfo(BaseModel):
    LanguageCode_1: Optional[LanguageCode] = Field(None, alias='LanguageCode')
    LastModifiedTime: Optional[DateTime] = None
    VocabularyFilterName_1: Optional[VocabularyFilterName] = Field(
        None, alias='VocabularyFilterName'
    )


class VocabularyFilters(RootModel[List[VocabularyFilterInfo]]):
    root: List[VocabularyFilterInfo]


class VocabularyInfo(BaseModel):
    LanguageCode_1: Optional[LanguageCode] = Field(None, alias='LanguageCode')
    LastModifiedTime: Optional[DateTime] = None
    VocabularyName_1: Optional[VocabularyName] = Field(None, alias='VocabularyName')
    VocabularyState_1: Optional[VocabularyState] = Field(None, alias='VocabularyState')


class CallAnalyticsJobSettings(BaseModel):
    ContentRedaction_1: Optional[ContentRedaction] = Field(
        None, alias='ContentRedaction'
    )
    LanguageIdSettings: Optional[LanguageIdSettingsMap] = None
    LanguageModelName: Optional[ModelName] = None
    LanguageOptions_1: Optional[LanguageOptions] = Field(None, alias='LanguageOptions')
    VocabularyFilterMethod_1: Optional[VocabularyFilterMethod] = Field(
        None, alias='VocabularyFilterMethod'
    )
    VocabularyFilterName_1: Optional[VocabularyFilterName] = Field(
        None, alias='VocabularyFilterName'
    )
    VocabularyName_1: Optional[VocabularyName] = Field(None, alias='VocabularyName')


class CallAnalyticsJobSummaries(RootModel[List[CallAnalyticsJobSummary]]):
    root: List[CallAnalyticsJobSummary]


class CreateLanguageModelRequest(BaseModel):
    BaseModelName_1: BaseModelName = Field(..., alias='BaseModelName')
    InputDataConfig_1: InputDataConfig = Field(..., alias='InputDataConfig')
    LanguageCode: CLMLanguageCode
    ModelName_1: ModelName = Field(..., alias='ModelName')
    Tags: Optional[TagList] = None


class CreateLanguageModelResponse(BaseModel):
    BaseModelName_1: Optional[BaseModelName] = Field(None, alias='BaseModelName')
    InputDataConfig_1: Optional[InputDataConfig] = Field(None, alias='InputDataConfig')
    LanguageCode: Optional[CLMLanguageCode] = None
    ModelName_1: Optional[ModelName] = Field(None, alias='ModelName')
    ModelStatus_1: Optional[ModelStatus] = Field(None, alias='ModelStatus')


class CreateMedicalVocabularyRequest(BaseModel):
    LanguageCode_1: LanguageCode = Field(..., alias='LanguageCode')
    Tags: Optional[TagList] = None
    VocabularyFileUri: Uri
    VocabularyName_1: VocabularyName = Field(..., alias='VocabularyName')


class CreateVocabularyFilterRequest(BaseModel):
    DataAccessRoleArn_1: Optional[DataAccessRoleArn] = Field(
        None, alias='DataAccessRoleArn'
    )
    LanguageCode_1: LanguageCode = Field(..., alias='LanguageCode')
    Tags: Optional[TagList] = None
    VocabularyFilterFileUri: Optional[Uri] = None
    VocabularyFilterName_1: VocabularyFilterName = Field(
        ..., alias='VocabularyFilterName'
    )
    Words_1: Optional[Words] = Field(None, alias='Words')


class CreateVocabularyRequest(BaseModel):
    DataAccessRoleArn_1: Optional[DataAccessRoleArn] = Field(
        None, alias='DataAccessRoleArn'
    )
    LanguageCode_1: LanguageCode = Field(..., alias='LanguageCode')
    Phrases_1: Optional[Phrases] = Field(None, alias='Phrases')
    Tags: Optional[TagList] = None
    VocabularyFileUri: Optional[Uri] = None
    VocabularyName_1: VocabularyName = Field(..., alias='VocabularyName')


class DescribeLanguageModelResponse(BaseModel):
    LanguageModel_1: Optional[LanguageModel] = Field(None, alias='LanguageModel')


class GetTranscriptionJobResponse(BaseModel):
    TranscriptionJob_1: Optional[TranscriptionJob] = Field(
        None, alias='TranscriptionJob'
    )


class ListCallAnalyticsJobsResponse(BaseModel):
    CallAnalyticsJobSummaries_1: Optional[CallAnalyticsJobSummaries] = Field(
        None, alias='CallAnalyticsJobSummaries'
    )
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    Status: Optional[CallAnalyticsJobStatus] = None


class ListLanguageModelsResponse(BaseModel):
    Models_1: Optional[Models] = Field(None, alias='Models')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListTagsForResourceResponse(BaseModel):
    ResourceArn: Optional[TranscribeArn] = None
    Tags: Optional[TagList] = None


class ListVocabularyFiltersResponse(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    VocabularyFilters_1: Optional[VocabularyFilters] = Field(
        None, alias='VocabularyFilters'
    )


class MedicalTranscriptionJob(BaseModel):
    CompletionTime: Optional[DateTime] = None
    ContentIdentificationType: Optional[MedicalContentIdentificationType] = None
    CreationTime: Optional[DateTime] = None
    FailureReason_1: Optional[FailureReason] = Field(None, alias='FailureReason')
    LanguageCode_1: Optional[LanguageCode] = Field(None, alias='LanguageCode')
    Media_1: Optional[Media] = Field(None, alias='Media')
    MediaFormat_1: Optional[MediaFormat] = Field(None, alias='MediaFormat')
    MediaSampleRateHertz: Optional[MedicalMediaSampleRateHertz] = None
    MedicalTranscriptionJobName: Optional[TranscriptionJobName] = None
    Settings: Optional[MedicalTranscriptionSetting] = None
    Specialty_1: Optional[Specialty] = Field(None, alias='Specialty')
    StartTime: Optional[DateTime] = None
    Tags: Optional[TagList] = None
    Transcript: Optional[MedicalTranscript] = None
    TranscriptionJobStatus_1: Optional[TranscriptionJobStatus] = Field(
        None, alias='TranscriptionJobStatus'
    )
    Type_1: Optional[Type] = Field(None, alias='Type')


class MedicalTranscriptionJobSummaries(RootModel[List[MedicalTranscriptionJobSummary]]):
    root: List[MedicalTranscriptionJobSummary]


class Rule(BaseModel):
    InterruptionFilter_1: Optional[InterruptionFilter] = Field(
        None, alias='InterruptionFilter'
    )
    NonTalkTimeFilter_1: Optional[NonTalkTimeFilter] = Field(
        None, alias='NonTalkTimeFilter'
    )
    SentimentFilter_1: Optional[SentimentFilter] = Field(None, alias='SentimentFilter')
    TranscriptFilter_1: Optional[TranscriptFilter] = Field(
        None, alias='TranscriptFilter'
    )


class RuleList(RootModel[List[Rule]]):
    root: List[Rule] = Field(..., max_length=20, min_length=1)


class StartCallAnalyticsJobRequest(BaseModel):
    CallAnalyticsJobName_1: CallAnalyticsJobName = Field(
        ..., alias='CallAnalyticsJobName'
    )
    ChannelDefinitions_1: Optional[ChannelDefinitions] = Field(
        None, alias='ChannelDefinitions'
    )
    DataAccessRoleArn_1: Optional[DataAccessRoleArn] = Field(
        None, alias='DataAccessRoleArn'
    )
    Media_1: Media = Field(..., alias='Media')
    OutputEncryptionKMSKeyId: Optional[KMSKeyId] = None
    OutputLocation: Optional[Uri] = None
    Settings: Optional[CallAnalyticsJobSettings] = None


class StartMedicalTranscriptionJobRequest(BaseModel):
    ContentIdentificationType: Optional[MedicalContentIdentificationType] = None
    KMSEncryptionContext: Optional[KMSEncryptionContextMap] = None
    LanguageCode_1: LanguageCode = Field(..., alias='LanguageCode')
    Media_1: Media = Field(..., alias='Media')
    MediaFormat_1: Optional[MediaFormat] = Field(None, alias='MediaFormat')
    MediaSampleRateHertz: Optional[MedicalMediaSampleRateHertz] = None
    MedicalTranscriptionJobName: TranscriptionJobName
    OutputBucketName_1: OutputBucketName = Field(..., alias='OutputBucketName')
    OutputEncryptionKMSKeyId: Optional[KMSKeyId] = None
    OutputKey_1: Optional[OutputKey] = Field(None, alias='OutputKey')
    Settings: Optional[MedicalTranscriptionSetting] = None
    Specialty_1: Specialty = Field(..., alias='Specialty')
    Tags: Optional[TagList] = None
    Type_1: Type = Field(..., alias='Type')


class StartMedicalTranscriptionJobResponse(BaseModel):
    MedicalTranscriptionJob_1: Optional[MedicalTranscriptionJob] = Field(
        None, alias='MedicalTranscriptionJob'
    )


class StartTranscriptionJobRequest(BaseModel):
    ContentRedaction_1: Optional[ContentRedaction] = Field(
        None, alias='ContentRedaction'
    )
    IdentifyLanguage: Optional[Boolean] = None
    IdentifyMultipleLanguages: Optional[Boolean] = None
    JobExecutionSettings_1: Optional[JobExecutionSettings] = Field(
        None, alias='JobExecutionSettings'
    )
    KMSEncryptionContext: Optional[KMSEncryptionContextMap] = None
    LanguageCode_1: Optional[LanguageCode] = Field(None, alias='LanguageCode')
    LanguageIdSettings: Optional[LanguageIdSettingsMap] = None
    LanguageOptions_1: Optional[LanguageOptions] = Field(None, alias='LanguageOptions')
    Media_1: Media = Field(..., alias='Media')
    MediaFormat_1: Optional[MediaFormat] = Field(None, alias='MediaFormat')
    MediaSampleRateHertz_1: Optional[MediaSampleRateHertz] = Field(
        None, alias='MediaSampleRateHertz'
    )
    ModelSettings_1: Optional[ModelSettings] = Field(None, alias='ModelSettings')
    OutputBucketName_1: Optional[OutputBucketName] = Field(
        None, alias='OutputBucketName'
    )
    OutputEncryptionKMSKeyId: Optional[KMSKeyId] = None
    OutputKey_1: Optional[OutputKey] = Field(None, alias='OutputKey')
    Settings_1: Optional[Settings] = Field(None, alias='Settings')
    Subtitles_1: Optional[Subtitles] = Field(None, alias='Subtitles')
    Tags: Optional[TagList] = None
    TranscriptionJobName_1: TranscriptionJobName = Field(
        ..., alias='TranscriptionJobName'
    )


class StartTranscriptionJobResponse(BaseModel):
    TranscriptionJob_1: Optional[TranscriptionJob] = Field(
        None, alias='TranscriptionJob'
    )


class TranscriptionJobSummaries(RootModel[List[TranscriptionJobSummary]]):
    root: List[TranscriptionJobSummary]


class UpdateCallAnalyticsCategoryRequest(BaseModel):
    CategoryName_1: CategoryName = Field(..., alias='CategoryName')
    InputType_1: Optional[InputType] = Field(None, alias='InputType')
    Rules: RuleList


class Vocabularies(RootModel[List[VocabularyInfo]]):
    root: List[VocabularyInfo]


class CallAnalyticsJob(BaseModel):
    CallAnalyticsJobName_1: Optional[CallAnalyticsJobName] = Field(
        None, alias='CallAnalyticsJobName'
    )
    CallAnalyticsJobStatus_1: Optional[CallAnalyticsJobStatus] = Field(
        None, alias='CallAnalyticsJobStatus'
    )
    ChannelDefinitions_1: Optional[ChannelDefinitions] = Field(
        None, alias='ChannelDefinitions'
    )
    CompletionTime: Optional[DateTime] = None
    CreationTime: Optional[DateTime] = None
    DataAccessRoleArn_1: Optional[DataAccessRoleArn] = Field(
        None, alias='DataAccessRoleArn'
    )
    FailureReason_1: Optional[FailureReason] = Field(None, alias='FailureReason')
    IdentifiedLanguageScore_1: Optional[IdentifiedLanguageScore] = Field(
        None, alias='IdentifiedLanguageScore'
    )
    LanguageCode_1: Optional[LanguageCode] = Field(None, alias='LanguageCode')
    Media_1: Optional[Media] = Field(None, alias='Media')
    MediaFormat_1: Optional[MediaFormat] = Field(None, alias='MediaFormat')
    MediaSampleRateHertz_1: Optional[MediaSampleRateHertz] = Field(
        None, alias='MediaSampleRateHertz'
    )
    Settings: Optional[CallAnalyticsJobSettings] = None
    StartTime: Optional[DateTime] = None
    Transcript_1: Optional[Transcript] = Field(None, alias='Transcript')


class CategoryProperties(BaseModel):
    CategoryName_1: Optional[CategoryName] = Field(None, alias='CategoryName')
    CreateTime: Optional[DateTime] = None
    InputType_1: Optional[InputType] = Field(None, alias='InputType')
    LastUpdateTime: Optional[DateTime] = None
    Rules: Optional[RuleList] = None


class CategoryPropertiesList(RootModel[List[CategoryProperties]]):
    root: List[CategoryProperties]


class CreateCallAnalyticsCategoryRequest(BaseModel):
    CategoryName_1: CategoryName = Field(..., alias='CategoryName')
    InputType_1: Optional[InputType] = Field(None, alias='InputType')
    Rules: RuleList


class CreateCallAnalyticsCategoryResponse(BaseModel):
    CategoryProperties_1: Optional[CategoryProperties] = Field(
        None, alias='CategoryProperties'
    )


class GetCallAnalyticsCategoryResponse(BaseModel):
    CategoryProperties_1: Optional[CategoryProperties] = Field(
        None, alias='CategoryProperties'
    )


class GetCallAnalyticsJobResponse(BaseModel):
    CallAnalyticsJob_1: Optional[CallAnalyticsJob] = Field(
        None, alias='CallAnalyticsJob'
    )


class GetMedicalTranscriptionJobResponse(BaseModel):
    MedicalTranscriptionJob_1: Optional[MedicalTranscriptionJob] = Field(
        None, alias='MedicalTranscriptionJob'
    )


class ListCallAnalyticsCategoriesResponse(BaseModel):
    Categories: Optional[CategoryPropertiesList] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListMedicalTranscriptionJobsResponse(BaseModel):
    MedicalTranscriptionJobSummaries_1: Optional[MedicalTranscriptionJobSummaries] = (
        Field(None, alias='MedicalTranscriptionJobSummaries')
    )
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    Status: Optional[TranscriptionJobStatus] = None


class ListMedicalVocabulariesResponse(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    Status: Optional[VocabularyState] = None
    Vocabularies_1: Optional[Vocabularies] = Field(None, alias='Vocabularies')


class ListTranscriptionJobsResponse(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    Status: Optional[TranscriptionJobStatus] = None
    TranscriptionJobSummaries_1: Optional[TranscriptionJobSummaries] = Field(
        None, alias='TranscriptionJobSummaries'
    )


class ListVocabulariesResponse(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    Status: Optional[VocabularyState] = None
    Vocabularies_1: Optional[Vocabularies] = Field(None, alias='Vocabularies')


class StartCallAnalyticsJobResponse(BaseModel):
    CallAnalyticsJob_1: Optional[CallAnalyticsJob] = Field(
        None, alias='CallAnalyticsJob'
    )


class UpdateCallAnalyticsCategoryResponse(BaseModel):
    CategoryProperties_1: Optional[CategoryProperties] = Field(
        None, alias='CategoryProperties'
    )
